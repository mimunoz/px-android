apply from: "$rootDir/gradle/base_android_lib.gradle"
apply from: "$rootDir/gradle/deploy_services.gradle"
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

def user_agent = "PX/Android/" + (libraryVersion as String)
enum Environment {
    PRODUCTION('"production"'), BETA('"beta"'), ALPHA('"alpha"'), GAMMA('"gamma"'), LEGACY_PROD('"v1"')

    private final String value

    private Environment(String value) {
        this.value = value
    }

    @Override
    String toString() {
        return value
    }
}

android {
    defaultConfig {
        buildConfigField "String", "USER_AGENT", "\"$user_agent\""
    }

    buildTypes {
        debug {
            buildConfigField "String", "API_ENVIRONMENT", "$Environment.LEGACY_PROD"
            buildConfigField "String", "API_ENVIRONMENT_NEW", "$Environment.PRODUCTION"
            buildConfigField "boolean", "HTTP_CLIENT_LOG", "true"
        }

        release {
            buildConfigField "String", "API_ENVIRONMENT", "$Environment.LEGACY_PROD"
            buildConfigField "String", "API_ENVIRONMENT_NEW", "$Environment.PRODUCTION"
            buildConfigField "boolean", "HTTP_CLIENT_LOG", "true"
        }
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dependencies {
    testImplementation "junit:junit:$junit"
    testImplementation "org.mockito:mockito-core:$mockito"
    testImplementation "org.mockito.kotlin:mockito-kotlin:$mockitoKotlin"

    implementation project(':px-addons')
    implementation "androidx.appcompat:appcompat:$appcompat"
    implementation "com.google.code.gson:gson:$gson"
    api "com.squareup.retrofit2:retrofit:$retrofit"
    api "com.squareup.retrofit2:converter-gson:$retrofit"
    api "com.squareup.okhttp3:logging-interceptor:$okhttp"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinCoroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinCoroutines"
}
